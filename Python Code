import sys
class LazySegmentTree:
    def __init__(self, data):
        self.n = len(data)
        self.data = data
        self.tree = [0] * (4 * self.n)
        self.lazy = [0] * (4 * self.n)
        self._build(1, 0, self.n - 1)

    def _build(self, v, tl, tr):
        if tl == tr:
            self.tree[v] = self.data[tl]
        else:
            tm = (tl + tr) // 2
            self._build(v * 2, tl, tm)
            self._build(v * 2 + 1, tm + 1, tr)
            self.tree[v] = self.tree[v * 2] + self.tree[v * 2 + 1]

    def _push(self, v, tl, tr):
        if self.lazy[v] == 0:
            return
        # A node's sum increases by lazy_value * range_length
        self.tree[v] += self.lazy[v] * (tr - tl + 1)
        if tl != tr:
            self.lazy[v * 2] += self.lazy[v]
            self.lazy[v * 2 + 1] += self.lazy[v]
        self.lazy[v] = 0

    def _update_range(self, v, tl, tr, l, r, add_val):
        self._push(v, tl, tr)
        if l > r:
            return
        if l == tl and r == tr:
            self.lazy[v] += add_val
            self._push(v, tl, tr)
        else:
            tm = (tl + tr) // 2
            self._update_range(v * 2, tl, tm, l, min(r, tm), add_val)
            self._update_range(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r, add_val)
            self.tree[v] = self.tree[v * 2] + self.tree[v * 2 + 1]

    def _query_range(self, v, tl, tr, l, r):
        if l > r:
            return 0
        self._push(v, tl, tr)
        if l == tl and r == tr:
            return self.tree[v]
        tm = (tl + tr) // 2
        left_sum = self._query_range(v * 2, tl, tm, l, min(r, tm))
        right_sum = self._query_range(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r)
        return left_sum + right_sum

    def update(self, l, r, add_val):
        self._update_range(1, 0, self.n - 1, l, r, add_val)

    def query(self, l, r):
        return self._query_range(1, 0, self.n - 1, l, r)

# --- Heavy Light Decomposition ---
class HeavyLightDecomposition:
    def __init__(self, n, edges, values):
        self.n = n
        self.adj = [[] for _ in range(n)]
        for u, v in edges:
            self.adj[u].append(v)
            self.adj[v].append(u)

        self.values = values
        self.parent = [-1] * n
        self.depth = [-1] * n
        self.subtree_size = [0] * n
        self.heavy_child = [-1] * n

        self.head = [-1] * n
        self.pos = [-1] * n
        self.pos_counter = 0
        self._dfs1_size(0, -1, 0)
        self._dfs2_hld(0, -1, 0)
        base_array = [0] * n
        for i in range(n):
            base_array[self.pos[i]] = self.values[i]
        self.seg_tree = LazySegmentTree(base_array)

    def _dfs1_size(self, u, p, d):
        self.parent[u] = p
        self.depth[u] = d
        self.subtree_size[u] = 1
        max_size = 0
        for v in self.adj[u]:
            if v == p:
                continue
            self._dfs1_size(v, u, d + 1)
            self.subtree_size[u] += self.subtree_size[v]
            if self.subtree_size[v] > max_size:
                max_size = self.subtree_size[v]
                self.heavy_child[u] = v

    def _dfs2_hld(self, u, p, h):
        self.head[u] = h
        self.pos[u] = self.pos_counter
        self.pos_counter += 1

        # Recurse on the heavy child first to ensure contiguity
        if self.heavy_child[u] != -1:
            self._dfs2_hld(self.heavy_child[u], u, h)

        # Recurse on light children, starting a new chain for each
        for v in self.adj[u]:
            if v != p and v != self.heavy_child[u]:
                self._dfs2_hld(v, u, v) # v is the head of its own new chain

    def _path_op(self, u, v, op_func, *args):
        res = 0 # Assuming sum operation, initial is 0
        while self.head[u] != self.head[v]:
            # Ensure u is the node on the "lower" path
            if self.depth[self.head[u]] < self.depth[self.head[v]]:
                u, v = v, u
            
            # Process the chain of u
            start_pos = self.pos[self.head[u]]
            end_pos = self.pos[u]
            op_func(start_pos, end_pos, *args)
            if op_func == self.seg_tree.query:
                res += self.seg_tree.query(start_pos, end_pos)

            # Jump to the next chain
            u = self.parent[self.head[u]]

        # Process the final segment on the same chain
        start_pos = min(self.pos[u], self.pos[v])
        end_pos = max(self.pos[u], self.pos[v])
        op_func(start_pos, end_pos, *args)
        if op_func == self.seg_tree.query:
            res += self.seg_tree.query(start_pos, end_pos)
        
        # For query, we need to subtract the final query part because it was double-counted
        if op_func == self.seg_tree.query:
             res -= self.seg_tree.query(start_pos, end_pos)
             return self.seg_tree.query(min(self.pos[u],self.pos[v]),max(self.pos[u],self.pos[v])) + res
        
        return res if op_func == self.seg_tree.query else None
    def query(self, u, v):
        res = 0
        while self.head[u] != self.head[v]:
            if self.depth[self.head[u]] < self.depth[self.head[v]]:
                u, v = v, u
            res += self.seg_tree.query(self.pos[self.head[u]], self.pos[u])
            u = self.parent[self.head[u]]
        res += self.seg_tree.query(min(self.pos[u], self.pos[v]), max(self.pos[u], self.pos[v]))
        return res

    def update(self, u, v, value):
        while self.head[u] != self.head[v]:
            if self.depth[self.head[u]] < self.depth[self.head[v]]:
                u, v = v, u
            self.seg_tree.update(self.pos[self.head[u]], self.pos[u], value)
            u = self.parent[self.head[u]]
        self.seg_tree.update(min(self.pos[u], self.pos[v]), max(self.pos[u], self.pos[v]), value)

n_nodes = 7
edges = [(0, 1), (0, 2), (1, 3), (3, 6), (2, 4), (2, 5)]
values = [1, 2, 3, 4, 5, 6, 7] # Values at nodes 0, 1, 2, ...

hld = HeavyLightDecomposition(n_nodes, edges, values)

print("--- Initial State ---")
path_sum_1 = hld.query(6, 4)
print(f"Sum of path (6, 4): {path_sum_1}")
assert path_sum_1 == 22
print("-" * 25)

print("--- After Update ---")
hld.update(3, 2, 10)
print("Added 10 to each node on path (3, 2)")
path_sum_2 = hld.query(6, 4)
print(f"New sum of path (6, 4): {path_sum_2}")
assert path_sum_2 == 62
path_sum_3 = hld.query(5, 0)
print(f"New sum of path (5, 0): {path_sum_3}")
assert path_sum_3 == 30
print("-" * 25)
